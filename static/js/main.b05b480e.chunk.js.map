{"version":3,"sources":["api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["url","TodoList","selectUser","useState","searchText","setSearchText","category","setCategory","todos","setTodos","useEffect","fetch","then","response","json","todosFromServer","todosToFilter","group","groupOfTodos","filter","todo","completed","todosToShow","title","includes","className","type","placeholder","value","onChange","event","target","onClick","map","sort","Math","random","a","b","classNames","checked","readOnly","userId","id","CurrentUser","selectedUserId","user","setUser","requestUser","userFromServer","name","email","phone","App","setSelectedUserId","ReactDOM","render","document","getElementById"],"mappings":"kTAEMA,G,MAAM,qC,OCSCC,EAA4B,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAC1C,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAAS,OAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0BJ,mBAAiB,IAA3C,mBAAOK,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WDXHC,MAAM,GAAD,OAAIX,EAAJ,WACTY,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCYxBF,MAAK,SAAAG,GACJN,EAASM,QAEZ,IAEH,IAAyBC,EAAuBC,EAgB1CC,GAhBmBF,EAgBYR,EAfrB,eADgCS,EAgBJX,GAdjCU,EAAcG,QAAO,SAAAC,GAAI,OAAIA,EAAKC,aAG7B,WAAVJ,EACKD,EAAcG,QAAO,SAAAC,GAAI,OAAKA,EAAKC,aAGrCL,GASHM,EAA0BJ,EALhBC,QAAO,SAAAC,GAAI,OAAIA,EAAKG,MAAMC,SAASpB,MAcnD,OACE,sBAAKqB,UAAU,WAAf,UACE,wCAEA,sBAAKA,UAAU,2BAAf,UACE,uBACEC,KAAK,OACLC,YAAY,eACZC,MAAOxB,EACPyB,SAAU,SAACC,GACTzB,EAAcyB,EAAMC,OAAOH,QAE7B,UAAQ,kBAGV,yBACEA,MAAOtB,EACPuB,SAAU,SAACC,GACTvB,EAAYuB,EAAMC,OAAOH,QAH7B,UAME,wBAAQA,MAAM,MAAd,iBAIA,wBAAQA,MAAM,SAAd,oBAIA,wBAAQA,MAAM,YAAd,0BAKF,wBACEF,KAAK,SACLM,QAAS,WACPvB,EAAsB,YAAID,GA1C/ByB,KAAI,SAAAb,GAAI,MAAK,CAAEA,OAAMc,KAAMC,KAAKC,aAChCF,MAAK,SAACG,EAAGC,GAAJ,OAAUD,EAAEH,KAAOI,EAAEJ,QAC1BD,KAAI,qBAAGb,UAqCN,oBASA,oBAAIK,UAAU,iBAAiB,UAAQ,cAAvC,SACGH,EAAYW,KAAI,SAAAb,GACf,OACE,qBAEEK,UAAWc,IACT,iBACA,CACE,6BAA8BnB,EAAKC,UACnC,0BAA2BD,EAAKC,YANtC,UAUE,kCACE,uBACEK,KAAK,WACLc,QAASpB,EAAKC,UACdoB,UAAQ,IAEV,4BAAIrB,EAAKG,WAGX,yBACEG,KAAK,SACLM,QAAS,WACP9B,EAAWkB,EAAKsB,SAElBjB,UAAU,+DAGV,UAAQ,aARV,sBAWGL,EAAKsB,YA7BHtB,EAAKuB,gBCxFbC,G,MAA+B,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAC7C,EAAwB1C,qBAAxB,mBAAO2C,EAAP,KAAaC,EAAb,KAOA,OALArC,qBAAU,YFHe,SAACmC,GAC1B,OAAOlC,MAAM,GAAD,OAAIX,EAAJ,kBAAiB6C,IAC1BjC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WEE3BkC,CAAYH,GACTjC,MAAK,SAAAqC,GAAc,OAAIF,EAAQE,QACjC,CAACJ,IAGF,qBAAKpB,UAAU,cAAf,SACGqB,EAEG,qCACE,oBAAIrB,UAAU,qBAAd,SACE,kDAEIoB,OAGN,oBACEpB,UAAU,oBACV,UAAQ,WAFV,SAIGqB,EAAKI,OAER,mBAAGzB,UAAU,qBAAb,SAAmCqB,EAAKK,QACxC,mBAAG1B,UAAU,qBAAb,SAAmCqB,EAAKM,QAExC,wBACE1B,KAAK,SACLD,UAAU,SACVO,QAAS,WACPe,EAAQ,OAJZ,sBAYF,wBCAKM,EA3CO,WACpB,MAGIlD,mBAAS,GAHb,mBACE0C,EADF,KAEES,EAFF,KAuBA,OACE,sBAAK7B,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEvB,WAAYoD,MAIhB,qBAAK7B,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGoB,EACC,cAAC,EAAD,CAAaA,eAAgBA,IAC3B,2BCvCdU,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b05b480e.chunk.js","sourcesContent":["import { Todo, User } from './react-app-env';\n\nconst url = 'https://mate.academy/students-api';\n\nexport const requestTodo = (): Promise<Todo[]> => {\n  return fetch(`${url}/todos`)\n    .then(response => response.json());\n};\n\nexport const requestUser = (selectedUserId: number): Promise<User> => {\n  return fetch(`${url}/users/${selectedUserId}`)\n    .then(response => response.json());\n};\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../react-app-env';\nimport './TodoList.scss';\nimport { requestTodo } from '../../api';\n\ntype Props = {\n  selectUser: (userId: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({ selectUser }) => {\n  const [searchText, setSearchText] = useState('');\n  const [category, setCategory] = useState('all');\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    requestTodo()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n      });\n  }, []);\n\n  const categoryOfTodos = (todosToFilter: Todo[], group: string) => {\n    if (group === 'completed') {\n      return todosToFilter.filter(todo => todo.completed);\n    }\n\n    if (group === 'active') {\n      return todosToFilter.filter(todo => !todo.completed);\n    }\n\n    return todosToFilter;\n  };\n\n  const filterTodos = (group2: Todo[]) => {\n    return group2.filter(todo => todo.title.includes(searchText));\n  };\n\n  const groupOfTodos = categoryOfTodos(todos, category);\n\n  const todosToShow = filterTodos(groupOfTodos);\n\n  const shuffleArray = (todosToShuffle: Todo[]) => {\n    return todosToShuffle\n      .map(todo => ({ todo, sort: Math.random() }))\n      .sort((a, b) => a.sort - b.sort)\n      .map(({ todo }) => todo);\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <input\n          type=\"text\"\n          placeholder=\"filter todos\"\n          value={searchText}\n          onChange={(event) => {\n            setSearchText(event.target.value);\n          }}\n          data-cy=\"filterByTitle\"\n        />\n\n        <select\n          value={category}\n          onChange={(event) => {\n            setCategory(event.target.value);\n          }}\n        >\n          <option value=\"all\">\n            All\n          </option>\n\n          <option value=\"active\">\n            Active\n          </option>\n\n          <option value=\"completed\">\n            Completed\n          </option>\n        </select>\n\n        <button\n          type=\"button\"\n          onClick={() => {\n            setTodos(shuffleArray([...todos]));\n          }}\n        >\n          Random\n        </button>\n\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {todosToShow.map(todo => {\n            return (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                  className=\"button\n                    TodoList__user-button\n                    TodoList__user-button--selected\"\n                  data-cy=\"userButton\"\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { requestUser } from '../../api';\nimport { User } from '../../react-app-env';\n\ntype Props = {\n  selectedUserId: number\n};\n\nexport const CurrentUser: React.FC<Props> = ({ selectedUserId }) => {\n  const [user, setUser] = useState<User | null>();\n\n  useEffect(() => {\n    requestUser(selectedUserId)\n      .then(userFromServer => setUser(userFromServer));\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user\n        ? (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                { selectedUserId }\n              </span>\n            </h2>\n            <h3\n              className=\"CurrentUser__name\"\n              data-cy=\"userName\"\n            >\n              {user.name}\n            </h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                setUser(null);\n              }}\n            >\n              Clear\n            </button>\n          </>\n\n        )\n        : 'User is not found'}\n\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  // !!!! if we change user with condition , better write function\n  // if without condition - we can pass setSelectesUserId\n\n  // const selectUser = (userId) => {\n  //   setSelectedUserId(userId);\n  // };\n\n  // !!!! option if we want to use async await\n\n  // const getTodosFromServer = async () => {\n  //   const todosFromServer = await getTodos();\n\n  //   setTodos(todosFromServer);\n  // };\n  // useEffect(() => {\n  //   getTodosFromServer();\n  // }, [])\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          selectUser={setSelectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser selectedUserId={selectedUserId} />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}